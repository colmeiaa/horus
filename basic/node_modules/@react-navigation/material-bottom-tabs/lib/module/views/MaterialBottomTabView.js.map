{"version":3,"sources":["MaterialBottomTabView.tsx"],"names":["React","StyleSheet","BottomNavigation","DefaultTheme","DarkTheme","MaterialCommunityIcons","NavigationHelpersContext","TabActions","useTheme","MaterialBottomTabView","state","navigation","descriptors","rest","dark","colors","theme","useMemo","t","surface","card","index","dispatch","jumpTo","routes","name","target","key","route","render","focused","color","options","tabBarIcon","styles","icon","tabBarLabel","undefined","title","tabBarColor","tabBarBadge","tabBarAccessibilityLabel","tabBarTestID","preventDefault","event","emit","type","canPreventDefault","defaultPrevented","create","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { BottomNavigation, DefaultTheme, DarkTheme } from 'react-native-paper';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport {\n  NavigationHelpersContext,\n  Route,\n  TabNavigationState,\n  TabActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport {\n  MaterialBottomTabDescriptorMap,\n  MaterialBottomTabNavigationConfig,\n  MaterialBottomTabNavigationHelpers,\n} from '../types';\n\ntype Props = MaterialBottomTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: MaterialBottomTabNavigationHelpers;\n  descriptors: MaterialBottomTabDescriptorMap;\n};\n\ntype Scene = { route: { key: string } };\n\nexport default function MaterialBottomTabView({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: Props) {\n  const { dark, colors } = useTheme();\n\n  const theme = React.useMemo(() => {\n    const t = dark ? DarkTheme : DefaultTheme;\n\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...colors,\n        surface: colors.card,\n      },\n    };\n  }, [colors, dark]);\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <BottomNavigation\n        {...rest}\n        theme={theme}\n        navigationState={state}\n        onIndexChange={(index: number) =>\n          navigation.dispatch({\n            ...TabActions.jumpTo(state.routes[index].name),\n            target: state.key,\n          })\n        }\n        renderScene={({ route }) => descriptors[route.key].render()}\n        renderIcon={({ route, focused, color }) => {\n          const { options } = descriptors[route.key];\n\n          if (typeof options.tabBarIcon === 'string') {\n            return (\n              <MaterialCommunityIcons\n                name={options.tabBarIcon}\n                color={color}\n                size={24}\n                style={styles.icon}\n                importantForAccessibility=\"no-hide-descendants\"\n                accessibilityElementsHidden\n              />\n            );\n          }\n\n          if (typeof options.tabBarIcon === 'function') {\n            return options.tabBarIcon({ focused, color });\n          }\n\n          return null;\n        }}\n        getLabelText={({ route }: Scene) => {\n          const { options } = descriptors[route.key];\n\n          return options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : (route as Route<string>).name;\n        }}\n        getColor={({ route }) => descriptors[route.key].options.tabBarColor}\n        getBadge={({ route }) => descriptors[route.key].options.tabBarBadge}\n        getAccessibilityLabel={({ route }) =>\n          descriptors[route.key].options.tabBarAccessibilityLabel\n        }\n        getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n        onTabPress={({ route, preventDefault }) => {\n          const event = navigation.emit({\n            type: 'tabPress',\n            target: route.key,\n            canPreventDefault: true,\n          });\n\n          if (event.defaultPrevented) {\n            preventDefault();\n          }\n        }}\n      />\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n"]}